import logging
from typing import Optional, Dict, Any
import re
import autogen  # type: ignore
from autogen import AssistantAgent
from app.config import Config
from app.state import StateManager

DEVELOPER_SYSTEM_MESSAGE = """
Voc√™ √© o Desenvolvedor (Developer).
Sua tarefa √© escrever o c√≥digo Python m√≠nimo necess√°rio para fazer os testes passarem.
Siga estritamente o ciclo TDD: RED (falha) ‚Üí GREEN (passa) ‚Üí REFACTOR (melhora).

Regras importantes:
1. Implemente APENAS o necess√°rio para os testes passarem
2. N√£o adicione funcionalidades extras n√£o testadas
3. Mantenha o c√≥digo simples e leg√≠vel
4. Siga as conven√ß√µes PEP8
5. Use nomes descritivos para fun√ß√µes e vari√°veis
6. Adicione docstrings explicativos

Se os testes falharem:
- Analise o feedback de erro com aten√ß√£o
- Identifique a causa raiz da falha
- Fa√ßa a corre√ß√£o m√≠nima necess√°ria

Voc√™ deve responder *apenas* com um √∫nico bloco de c√≥digo Python que salva o arquivo.
N√£o adicione nenhum texto antes ou depois do bloco de c√≥digo.

Exemplo de Resposta (para teste de soma):
```python
import os
os.makedirs('workspace', exist_ok=True)
with open('workspace/app_code.py', 'w') as f:
    f.write(\"""
def add(a: int, b: int) -> int:
    \"\"\"
    Soma dois n√∫meros inteiros.
    
    Args:
        a: Primeiro n√∫mero
        b: Segundo n√∫mero
    
    Returns:
        int: Soma de a e b
    \"\"\"
    return a + b
\""")
print("‚úÖ C√≥digo implementado em: workspace/app_code.py")
```
"""

def validate_implementation(code: str) -> Optional[str]:
    """
    Validar c√≥digo implementado.
    
    Returns:
        str: Mensagem de erro se inv√°lido, None se v√°lido
    """
    if not code:
        return "C√≥digo vazio gerado"
    
    # Verificar se cont√©m testes
    if "def test_" in code or "import pytest" in code:
        return "C√≥digo cont√©m testes (deve estar em arquivo separado)"
    
    # Verificar se h√° pelo menos uma fun√ß√£o
    if "def " not in code:
        return "Nenhuma fun√ß√£o implementada"
    
    # Verificar docstrings
    func_pattern = r"def\s+(\w+)\s*\("
    funcs = re.finditer(func_pattern, code)
    for match in funcs:
        func_name = match.group(1)
        func_pos = match.start()
        next_lines = code[func_pos:func_pos + 200]  # Pr√≥ximas linhas ap√≥s fun√ß√£o
        if '"""' not in next_lines and "'''" not in next_lines:
            return f"Fun√ß√£o {func_name} n√£o tem docstring"
    
    return None

def generate_code(state: StateManager) -> None:
    """
    Gerar/atualizar implementa√ß√£o baseada nos testes e feedback.
    
    Args:
        state: Gerenciador de estado do TDD
    """
    iteration = state.get("iteration", 1)
    logging.info("=" * 60)
    if iteration == 1:
        logging.info("üíª FASE 3 (TDD - GREEN): Gerando implementa√ß√£o inicial")
    else:
        logging.info(f"üíª FASE 5 (TDD - REFACTOR): Refatorando c√≥digo (itera√ß√£o {iteration})")
    logging.info("=" * 60)
    
    tests = state.get("tests", "")
    feedback = state.get("feedback", "")
    prev_code = state.get("code", "")
    
    # Criar agente e gerar c√≥digo
    agent = get_agent()
    context = f"""
    TESTES ATUAIS:
    {tests}
    
    FEEDBACK (se houver):
    {feedback}
    
    C√ìDIGO ANTERIOR (se houver):
    {prev_code}
    """
    
    # Criar um UserProxyAgent para receber a resposta
    user_proxy = autogen.UserProxyAgent(
        name="user_proxy",
        human_input_mode="NEVER",
        code_execution_config={"use_docker": False}
    )
    
    # Iniciar chat com o agente
    logging.info("üí¨ Iniciando conversa com Developer...")
    
    def log_chat_step(message: Dict[str, Any]) -> None:
        """Log detalhado de cada etapa da conversa"""
        content = message.get("content", "")
        role = message.get("role", "unknown")
        name = message.get("name", "unknown")
        
        # Determinar dire√ß√£o e √≠cone da mensagem
        if role == "user":
            icon, direction = "üë§", "‚Üí"
            source, target = name, agent.name
        else:
            icon, direction = "ü§ñ", "‚Üê"
            source, target = agent.name, "user"
            
        # Detectar tipo de mensagem
        msg_type = "üìù"  # Texto normal
        if not content.strip():
            msg_type = "‚ö™"  # Mensagem vazia
            logging.debug(f"{msg_type} Mensagem vazia detectada de {source}")
        elif "```python" in content:
            msg_type = "ÔøΩ"  # C√≥digo Python
            logging.debug(f"{msg_type} Bloco de c√≥digo Python detectado")
        elif content.startswith(">>>>>>>> EXECUTING"):
            msg_type = "‚ö°"  # Execu√ß√£o
            logging.debug(f"{msg_type} Execu√ß√£o de c√≥digo iniciada")
        elif "exitcode:" in content:
            msg_type = "üîÑ"  # Resultado de execu√ß√£o
            logging.debug(f"{msg_type} Resultado de execu√ß√£o recebido")
        
        # Formatar e truncar mensagem para log
        msg_preview = content.replace("\n", "\\n")[:100] if content.strip() else "(vazia)"
        if len(content) > 100:
            msg_preview += "..."
            
        # Log da intera√ß√£o com tipo de mensagem
        logging.info(f"{msg_type} {icon} {source} {direction} {target}: {msg_preview}")
        
        # Log de m√©tricas
        if content.strip():
            chars = len(content)
            lines = len(content.split("\n"))
            logging.debug(f"üìä M√©tricas: {chars} caracteres, {lines} linhas")
    
    # Iniciar chat com callback de logging
    response = user_proxy.initiate_chat(
        agent,
        message=f"Implemente c√≥digo para passar nos testes:\n{context}",
        callback=log_chat_step
    )
    logging.info("üí¨ Conversa com Developer finalizada")
    
    # Extrair o c√≥digo da √∫ltima mensagem do assistente
    assistant_messages = [msg for msg in response.chat_history if msg["role"] == "assistant"]
    code = assistant_messages[-1]["content"] if assistant_messages else ""
    
    # Validar implementa√ß√£o
    if error := validate_implementation(code):
        logging.error(f"‚ùå {error}")
        if prev_code:
            logging.info("‚ôªÔ∏è Mantendo implementa√ß√£o anterior...")
            code = prev_code
        else:
            raise ValueError(f"Falha ao gerar c√≥digo v√°lido: {error}")
    
    # Salvar implementa√ß√£o
    state.save_implementation_file(code)
    
    # Atualizar estado
    state.update(
        code=code,
        test_phase="green"
    )
    
    # Preview do c√≥digo
    preview = code.split('\n')[:10]
    logging.info("üìÑ Preview da implementa√ß√£o:")
    for line in preview:
        logging.info(line)
    logging.info("...")

def get_agent() -> AssistantAgent:
    """Retorna uma inst√¢ncia do Agente Desenvolvedor"""
    return AssistantAgent(
        name="Developer",
        system_message=DEVELOPER_SYSTEM_MESSAGE,
        llm_config=Config.get_llm_config(),
    )
